!function(e){"use strict";function t(e,t,o,n,i){var r="/app",a="/welcome";e.state(i.TAB,{url:r,"abstract":!0,templateUrl:"wsp/wsp.tpl.html"}),t.otherwise(r+a),n.setPrefix("ppa").setStorageType("localStorage")}e.module("myApp.appConfig",["ui.router","LocalStorageModule","angular-jwt","myApp.stateFactory","myApp.WspController"]).config(["$stateProvider","$urlRouterProvider","$httpProvider","localStorageServiceProvider","stateFactory",t])}(window.angular),function(e){"use strict";var t=function(e,t){t.ready(function(){t.on("offline",function(){window.alert("Offline mode")}),t.on("volumeupbutton",function(){window.alert("volumeupbutton")}),window.cordova&&window.cordova.plugins.Keyboard&&window.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&window.StatusBar.styleDefault()})};e.module("myApp",["ionic","myApp.templateFactory","myApp.bytAutofillFix","myApp.appConfig"]).run(["$log","$ionicPlatform",t])}(window.angular),function(e){"use strict";var t=function(){};e.module("myApp.CusCabinetController",[]).controller("CusCabinetController",[t])}(window.angular),function(e){"use strict";var t=function(e,t,o){e.cus_order={name:"",description:""},e.cleanCusOrder=function(e){e.name="",e.description=""},e.addCusOrder=function(n){e.orders.$add({from:n.name,body:n.description,created:window.Firebase.ServerValue.TIMESTAMP,id_customer:e.app_user.acid}).then(function(i){e.cleanCusOrder(n),t.log("added record with id "+i.key()),o.msg("Заявка оставлена успешно","Вам будут высланы уведомления, как только исполнители примут заказ")},function(e){o.error("Ошибка",e)})}};e.module("myApp.CusOrderController",["myApp.notifFactory"]).controller("CusOrderController",["$scope","$log","notifFactory",t])}(window.angular),function(e){"use strict";var t=function(e,t,o,n,i,r,a,l){e.account={lgn:"ivanich-86@mail.ru",pwd:"qwerty",is_stay:!0},e.account_meta=r.init(),e.cleanAccount=function(){e.account.pwd="",e.account.lgn="",e.account.is_stay=!0};var s=function(){e.account.pwd=""};e.enterPass=function(t,o,n){return o.id?(n.is_in_action=!0,l.loginPass(t.lgn,t.pwd,o.id).then(e.enterSuccess,e.enterFail).then(s)["finally"](e.enterFinally)):void a.error("Ошибка","Не выбрана роль пользователя")}};e.module("myApp.LoginController",["myApp.apiPubFactory","myApp.stateFactory","myApp.accountMetaFactory","myApp.notifFactory","myApp.lgnFactory"]).controller("LoginController",["$scope","$state","$log","apiPubFactory","stateFactory","accountMetaFactory","notifFactory","lgnFactory",t])}(window.angular),function(e){"use strict";var t=function(e,t,o,n,i,r){e.pwc_acc={email:"",pwd:"",pwd_again:""},e.pwc_roles=r.loadAppRoles(),e.pwc_role={id:null},e.pwc_state={is_in_action:!1},e.cleanPwc=function(){e.pwc_acc.email="",e.pwc_acc.pwd="",e.pwc_acc.pwd_again="",e.pwc_role.id=null},e.changePwd=function(r,a,l){if(!a.id)return void i.error("Ошибка","Укажите роль пользователя");if(r.pwd!==r.pwd_again)return void i.error("Ошибка","Пароли не совпадают");l.is_in_action=!0;var s=n.selectIssuer(a.id),c=o.defer();s.changePassword({connection:"Username-Password-Authentication",username:r.email,password:r.pwd},function(e,o){e?400===e.status&&"invalid_user"===e.code?c.reject("Электронный адрес не зарегистрирован для данного типа пользователя"):400===e.status&&"invalid_password"===e.code?c.reject("Пароль не соответствует рекомендациям надёжности"):(c.reject("Ошибка изменения пароля"),t.log("Change password error",e,o)):c.resolve()}),c.promise.then(function(){i.error("Изменение пароля","На указанный электронный адрес отправлены дальнейшие инструкции для изменения пароля"),e.cleanPwc()})["catch"](function(e){i.error("Ошибка",e)})["finally"](function(){e.pwc_state.is_in_action=!1})}};e.module("myApp.PwdChangingController",["myApp.issFactory","myApp.notifFactory","myApp.apiPubFactory"]).controller("PwdChangingController",["$scope","$log","$q","issFactory","notifFactory","apiPubFactory",t])}(window.angular),function(e){"use strict";var t=function(e){e.quick_order={name:"",description:""},e.makeQuickOrder=function(){alert("Заказ заказан")}};e.module("myApp.QuickOrderController",[]).controller("QuickOrderController",["$scope",t])}(window.angular),function(e){"use strict";function t(e,t,o,n,i){t.log("RegisterController"),e.acc_reg={lgn:"ivanrave@live.ru",pwd:"1q2w#E$R",pwd_again:"1q2w#E$R",is_agree:!1},e.pwd_pattern=/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[A-Za-z0-9!@#$%^&*()_]{8,50}$/,e.startRegister=function(r,a,l){if(!a.id)return void i.error("Ошибка регистрации","Не выбрана роль пользователя");if(r.pwd!==r.pwd_again)return void i.error("Ошибка регистрации","Пароль и повтор пароля не совпадают");l.is_in_action=!0;var s=function(n){t.log("register success",n),o.loginPass(r.lgn,r.pwd,a.id).then(e.enterSuccess,e.enterFail)["finally"](e.enterFinally)},c=function(e){i.error("Ошибка регистрации",e)};n.registerPass(r.lgn,r.pwd,a.id).then(s,c)}}e.module("myApp.RegisterController",["myApp.lgnFactory","myApp.rgstrFactory","myApp.notifFactory"]).controller("RegisterController",["$scope","$log","lgnFactory","rgstrFactory","notifFactory",t])}(window.angular),function(e){"use strict";function t(e,t,o,n,i,r,a,l,s){e.reglogmsg="reglogmsg",e.reglog_state={is_in_action:!1},e.utypes=l.loadAppRoles(),e.reglog_role={id:null},e.is_login_view=o.reg?!1:!0,e.toggleRegLogView=function(){e.is_login_view=!e.is_login_view},e.enterSuccess=function(){var e=function(){t.go(i.WELCOME)},o=function(e){r.error("Ошибка",e)};s.fillAccount().then(e,o)},e.enterFail=function(e){return r.error("Ошибка входа",e),e},e.enterFinally=function(){e.reglog_state.is_in_action=!1},e.enterSocial=function(t){return t.id?(e.is_enter_in_action=!0,a.loginSocial("google-oauth2",t.id).then(e.enterSuccess,e.enterFail)["finally"](e.enterFinally)):void r.error("Ошибка","Не выбрана роль пользователя")}}e.module("myApp.RegLogController",["myApp.LoginController","myApp.RegisterController","myApp.apiPubFactory","myApp.stateFactory","myApp.accountMetaFactory","myApp.notifFactory","myApp.lgnFactory","myApp.accFactory"]).controller("RegLogController",["$scope","$state","$stateParams","$log","stateFactory","notifFactory","lgnFactory","apiPubFactory","accFactory",t])}(window.angular),function(e){"use strict";function t(){}e.module("myApp.SupCabinetController",[]).controller("SupCabinetController",[t])}(window.angular),function(e){"use strict";function t(e){e.vwm={msg:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}}e.module("myApp.WelcomeController",[]).controller("WelcomeController",["$scope","$log",t])}(window.angular),function(e){"use strict";var t=function(e,t){var o="/welcome";e.state(t.WELCOME,{url:o,views:{mainContent:{templateUrl:"welcome/welcome.tpl.html",controller:"WelcomeController"}}}).state(t.LOGIN,{url:"/login?reg",views:{mainContent:{templateUrl:"all/tts/reglog-tab.tpl.html"}}}).state(t.PWD_CHANGING,{url:"/password-changing",views:{mainContent:{templateUrl:"pwd-changing/pwd-changing.tpl.html"}}}).state(t.SUPCAB,{url:"/master","abstract":!0,views:{mainContent:{templateUrl:"sup-cabinet/sup-cabinet.tpl.html",controller:"SupCabinetController"}}}).state(t.SUPCAB_INFO,{url:"/info",views:{supInception:{templateUrl:"sup-info/sup-info.tpl.html"}}}).state(t.CUSCAB,{url:"/user","abstract":!0,views:{mainContent:{templateUrl:"cus-cabinet/cus-cabinet.tpl.html",controller:"CusCabinetController"}}}).state(t.CUSCAB_INFO,{url:"/info",views:{cusInception:{templateUrl:"cus-info/cus-info.tpl.html"}}})};e.module("myApp.wspConfig",["ui.router","myApp.stateFactory","myApp.WelcomeController","myApp.RegLogController","myApp.PwdChangingController","myApp.SupCabinetController","myApp.CusCabinetController","myApp.QuickOrderController","myApp.CusOrderController"]).config(["$stateProvider","stateFactory",t])}(window.angular),function(e){"use strict";var t=function(e,t,o,n,i,r,a,l,s,c){a.fillAccount().then(function(t){e.app_user=t},function(e){s.error("Ошибка",e)}),e.goToPwdChanging=function(){t.go(r.PWD_CHANGING)},e.goToLogin=function(e){var o={};o.reg=e?"reg":"",t.go(r.LOGIN,o)},e.logoff=function(){a.cleanAccount(),t.go(r.WELCOME)},e.logoffAndClosePopover=function(t){o.log("close event",t),e.popover.hide(),e.logoff()},e.goToCab=function(){var e=a.readAccount();e.is_cus_user?t.go(r.CUSCAB_INFO):e.is_sup_user&&t.go(r.SUPCAB_INFO)},e.goToCabAndClosePopover=function(t){o.log("close event",t),e.popover.hide(),e.goToCab()},e.openModalLgn=function(){e.modalLogin.show()},e.closeModalLgn=function(){e.modalLogin.hide()},e.checkVerification=function(){s.error("В разработке","Пожалуйста войдите заново после подтверждения электронного адреса")},e.orders=c.myFire.$asArray(),e.not_auth_notif="Доступ к запрашиваемой странице закрыт. Войдите под соответствующей учётной записью",l.init(e,"all/tts/reglog-modal.tpl.html","modalLogin"),i.init(e,"all/tts/account-popover.tpl.html")};e.module("myApp.WspController",["ui.router","myApp.wspConfig","myApp.popoverFactory","myApp.stateFactory","myApp.accFactory","myApp.modalFactory","myApp.notifFactory","myApp.fireFactory"]).controller("WspController",["$scope","$state","$log","$http","popoverFactory","stateFactory","accFactory","modalFactory","notifFactory","fireFactory",t])}(window.angular),function(e){"use strict";e.module("myApp.roulFactory",[]).constant("roulFactory",{SUP_USER:"sup_user",CUS_USER:"cus_user",ADMIN_USER:"admin_user",MODER_USER:"moder_user"})}(window.angular),function(e){"use strict";e.module("myApp.stateFactory",[]).constant("stateFactory",{TAB:"byt",LOGIN:"byt.login",PWD_CHANGING:"byt.pwd_changing",WELCOME:"byt.welcome",SUPCAB:"byt.supcab",SUPCAB_INFO:"byt.supcab.info",CUSCAB:"byt.cuscab",CUSCAB_INFO:"byt.cuscab.info"})}(window.angular),function(e){"use strict";e.module("myApp.uriFactory",[]).constant("uriFactory",{DYN_URI:"https://amber-torch-6978.firebaseio.com/"})}(window.angular),function(e){"use strict";function t(){return{asdf:123}}e.module("myApp.cusApiFactory",[]).factory("cusApiFactory",[t])}(window.angular),function(e){"use strict";function t(e){return function(t,o,n){o.prop("method","POST"),n.ngSubmit&&e(function(){o.unbind("submit").bind("submit",function(e){e.preventDefault(),o.find("input, textarea, select").triggerHandler("input").triggerHandler("change").triggerHandler("keydown"),t.$apply(n.ngSubmit)})},0)}}e.module("myApp.bytAutofillFix",[]).directive("bytAutofillFix",["$timeout",t])}(angular),function(e){"use strict";var t={acid:null,name:null,phone:null,email:null,id_role:null,is_authed:!1,is_email_verified:null,is_sup_user:null,is_cus_user:null},o=function(o,n,i,r,a,l,s,c,u){function d(){t.acid=null,t.name=null,t.phone=null,t.email=null,t.id_role=null,t.is_authed=!1,t.is_email_verified=null,t.is_sup_user=null,t.is_cus_user=null}var p=function(e){o.log("writeAccount",e),t.acid=e.acid,t.name=e.name,t.phone=e.phone,t.email=e.email,t.id_role=e.id_role,t.is_email_verified=e.is_email_verified,t.is_authed=t.name?!0:!1,e.id_role===r.SUP_USER?(t.is_sup_user=!0,t.is_cus_user=null):e.id_role===r.CUS_USER?(t.is_sup_user=null,t.is_cus_user=!0):(t.is_sup_user=null,t.is_cus_user=null)},g=function(e,n,i,r,a){if(r)return o.log("GetProfile error",r),void e.reject("Не удалось получить данные о пользователе. Попробуйте ещё раз.");var l=c.readDyn();l&&l.auth&&l.auth.fb_id===a.user_id||(o.log("uid from firebase and auth0 are not equals",l,a.user_id),u.getTableToken(i,n).then(function(e){return o.log("exchToken from delegation: "+e),c.fillDyn(e)})["catch"](function(e){o.log("deleg or customlogin error",e)})),o.log(a),p({acid:a.user_id,name:a.name,phone:null,email:a.email,id_role:n,is_email_verified:a.email_verified}),e.resolve(t)},m=function(i){var r=n.defer();if(i){var a=l.selectIssuer(i.id_role);a.getProfile(i.sid,e.bind(null,g,r,i.id_role,i.sid))}else o.log("no sessObj"),r.resolve(t);return r.promise},v=function(){s.cleanLocally(),d(),c.cleanDyn()},f=function(o,i){return i?e.equals(o,i)?m(i):s.saveLocally(i.sid,i.id_role,i.refresh_token).then(function(e){return m(e)},function(e){return n.reject(e)}):(v(),t)},y=function(e,t,o){return s.saveLocally(e,t,o)};return{readAccount:function(){return t},cleanAccount:v,fillAccount:function(t){return s.readLocally().then(function(o){return a.calcSessObj(t,o).then(e.bind(null,f,o))})},applyAccount:y}};e.module("myApp.accFactory",["angular-jwt","myApp.roulFactory","myApp.tokenFactory","myApp.issFactory","myApp.sessionFactory","myApp.dynFactory","myApp.delegFactory"]).factory("accFactory",["$log","$q","jwtHelper","roulFactory","tokenFactory","issFactory","sessionFactory","dynFactory","delegFactory",o])}(window.angular),function(e){"use strict";function t(e,t,o,n){return{loadAppRoles:function(){return[{id:n.CUS_USER,name:"Заказчик"},{id:n.SUP_USER,name:"Исполнитель"}]}}}e.module("myApp.apiPubFactory",["myApp.roulFactory"]).factory("apiPubFactory",["$q","$timeout","$log","roulFactory",t])}(window.angular),function(e){"use strict";var t=function(e,t,o){var n=function(n,i){var r=o.selectIssuer(i),a={id_token:n,api:"firebase",scope:"openid profile"},l=e.defer();return r.getDelegationToken(a,function(e,o){t.log("getDelegationToken"),e?(t.log(e),l.reject("Ошибка подключения")):(t.log(o),l.resolve(o.id_token))}),l.promise};return{getTableToken:n}};e.module("myApp.delegFactory",["myApp.issFactory"]).factory("delegFactory",["$q","$log","issFactory",t])}(window.angular),function(e,t){"use strict";var o=function(e,o){var n=new t(o.DYN_URI),i=e(n);return{cleanDyn:function(){i.$unauth()},readDyn:function(){return i.$getAuth()},fillDyn:function(e){return i.$authWithCustomToken(e)}}};e.module("myApp.dynFactory",["firebase","myApp.uriFactory"]).factory("dynFactory",["$firebaseAuth","uriFactory",o])}(window.angular,window.Firebase),function(e,t){"use strict";var o=function(e,o){var n=new t(o.DYN_URI),i=n.child("qwer").orderByKey().limitToLast(3),r=e(i);return{myFire:r}};e.module("myApp.fireFactory",["firebase","myApp.uriFactory"]).factory("fireFactory",["$firebase","uriFactory",o])}(window.angular,window.Firebase),function(e,t){"use strict";function o(e){var o={};o[e.SUP_USER]=new t({domain:"masterpodbor.auth0.com",clientID:"Xd5fRPEjjANUARhlcgtOvhNMwDEg4isk",callbackURL:"https://masterpodbor.auth0.com/mobile",callbackOnLocationHash:!0}),o[e.CUS_USER]=new t({domain:"masterpodbor.auth0.com",clientID:"Xd5fRPEjjANUARhlcgtOvhNMwDEg4isk",callbackURL:"https://masterpodbor.auth0.com/mobile",callbackOnLocationHash:!0});var n=function(e){var t=o[e];if(!t)throw new Error("No such issuer: "+e);return t};return{selectIssuer:n}}e.module("myApp.issFactory",["myApp.roulFactory"]).factory("issFactory",["roulFactory",o])}(window.angular,window.Auth0),function(e){"use strict";function t(t,o,n){function i(t,o){var n=!0;return e.forEach(t,function(e,t){o[t]!==e&&(n=!1)}),n}function r(r,a,l){var s=o.defer(),c=n.get(r);if(c){var u=e.fromJson(c),d=u.filter(e.bind(null,i,a));l?s.resolve(d):d.length>1?s.reject("notOnlyOne"):s.resolve(d[0])}else t.log("tbl not found",c,r),s.resolve(l?[]:null);return s.promise}function a(t,i){var r=o.defer(),a=n.get(t),l=a?e.fromJson(a):[],s=l.filter(function(e,t){return e.id===i.id?(l[t]=i,!0):!1})[0];return s||l.push(i),n.set(t,e.toJson(l)),r.resolve(i),r.promise}function l(t,r){var a=o.defer(),l=n.get(t);if(!l)return void a.resolve();var s=e.fromJson(l);return e.forEach(s,function(e,t){i(r,e)&&s.splice(t,1)}),n.set(t,e.fromJson(s)),a.resolve(),a.promise}return{writeToStorage:a,readFromStorage:r,delFromStorage:l}}e.module("myApp.ldbFactory",["LocalStorageModule"]).factory("ldbFactory",["$log","$q","localStorageService",t])}(window.angular),function(e){"use strict";function t(t,o,n,i){var r=function(t,n,r,a,l,s,c,u){if(r)return 401===r.status&&"invalid_user_password"===r.code?void t.reject("Неверный email или пароль"):(t.reject(r.message),void o.log("login error",e.toJson(r)));var d=function(){t.resolve()},p=function(e){t.reject(e)};i.applyAccount(l,n,u).then(d,p)},a=function(e,o,i){var a=t.defer(),l=n.selectIssuer(i);return l.login({connection:"Username-Password-Authentication",username:e,password:o,scope:"openid offline_access",device:"Mobile device"},function(e,t,o,n,l,s){r(a,i,e,t,o,n,l,s)}),a.promise},l=function(o,i){var a=t.defer(),l=n.selectIssuer(i);return l.login({connection:o,popup:!0,popupOptions:{width:450,height:800},scope:"openid offline_access",device:"Mobile device"},e.bind(null,r,a,i)),a.promise};return{loginPass:a,loginSocial:l}}e.module("myApp.lgnFactory",["myApp.issFactory","myApp.accFactory"]).factory("lgnFactory",["$q","$log","issFactory","accFactory",t])}(window.angular),function(e){"use strict";function t(e){function t(t,o,n){return n?e("/api/"+t).query().$promise:e("/api/"+t).get().$promise}function o(t,o){return e("/api/"+t).$save(o).$promise}return{read:t,write:o}}e.module("myApp.reqFactory",["ngResource"]).factory("reqFactory",["$resource",t])}(window.angular),function(e){"use strict";var t=function(e,t,o){var n=function(n,i,r){var a=t.defer(),l=o.selectIssuer(r);return l.signup({connection:"Username-Password-Authentication",username:n,password:i,auto_login:!1},function(t,o){if(t){if(e.log("error from lgnFactory"),e.log(t),400===t.status){if("invalid_password"===t.name)return void a.reject("Укажите более надёжный пароль.");if("username_exists"===t.name||"user_exists"===t.name)return void a.reject("Пользователь с таким электронным адресом уже существует.")}return void a.reject("Системная ошибка. Попробуйте позже.")}a.resolve(o)}),a.promise};return{registerPass:n}};e.module("myApp.rgstrFactory",["myApp.issFactory"]).factory("rgstrFactory",["$log","$q","issFactory",t])}(window.angular),function(e){"use strict";function t(e,t){var o="sess";return{readLocally:function(){return t.readFromStorage(o,{id:0},!1)},saveLocally:function(e,n,i){if(!n)throw new Error("id_role required");return t.writeToStorage(o,{id:0,sid:e,id_role:n,refresh_token:i})},cleanLocally:function(){return t.delFromStorage(o,{id:0})}}}e.module("myApp.sessionFactory",["myApp.ldbFactory"]).factory("sessionFactory",["$q","ldbFactory",t])}(window.angular),function(e){"use strict";function t(t,i,r,a){var l=function(o,n,i,r){if(i)t.log("Error cbkRefreshToken: ",i),o.resolve(null);else{t.log("isExpired: refreshed"),t.log(i),t.log(r);var a=e.copy(n);a.sid=r.id_token,o.resolve(a)}},s=function(s,c){var u=i.defer();if(c){var d=r.getTokenExpirationDate(c.sid),p=a.selectIssuer(c.id_role);o(d)?c.refresh_token?(t.log("isExpired: refreshed"),p.refreshToken(c.refresh_token,e.bind(null,l,u,c))):u.resolve(null):n(d)?(t.log("isExpiredSoon"),p.renewIdToken(c.sid,e.bind(null,l,u,c))):s?(p.refreshToken(c.refresh_token,e.bind(null,l,u,c)),t.log("isMustRenew")):u.resolve(c)}else t.log("readLocally not found session"),u.resolve(null);return u.promise};return{calcSessObj:s}}var o=function(e){return e.valueOf()<=(new Date).valueOf()},n=function(e){var t=9e5,o=(new Date).valueOf()-t;return e.valueOf()<=o};e.module("myApp.tokenFactory",["angular-jwt","myApp.issFactory"]).factory("tokenFactory",["$log","$q","jwtHelper","issFactory",t])}(window.angular),function(e){"use strict";function t(){return{}}e.module("myApp.supApiFactory",[]).factory("supApiFactory",[t])}(window.angular),function(e){"use strict";e.module("myApp.loadingFactory",["ionic"]).factory("loadingFactory",["$ionicLoading",function(e){return{turnOn:function(){e.show({template:"Loading..."})},turnOff:function(){e.hide()}}}])}(window.angular),function(e){"use strict";function t(e,t){var o=function(e,o,n){t.fromTemplateUrl(o,{scope:e,animation:"slide-in-up",focusFirstInput:!0}).then(function(t){e[n]=t})};return{init:o}}e.module("myApp.modalFactory",["ionic"]).factory("modalFactory",["$log","$ionicModal",t])}(window.angular),function(e){"use strict";function t(e){var t=function(t,o){e.alert({title:t,template:o,buttons:[{text:"Понятно",type:"button-balanced"}]})},o=function(t,o){e.alert({title:t,template:o,buttons:[{text:"Понятно",type:"button-assertive"}]})};return{error:o,msg:t}}e.module("myApp.notifFactory",["ionic"]).factory("notifFactory",["$ionicPopup",t])}(window.angular),function(e){"use strict";function t(e,t){var o=function(o,n){t.fromTemplateUrl(n,{scope:o}).then(function(t){o.popover=t,o.$on("popover.hidden",function(){e.log("popover.hidden")}),o.$on("popover.removed",function(){e.log("popover.removed")}),o.$on("$destroy",function(){o.popover.remove(),e.log("popover.$destroy from scrope")})})};return{init:o}}e.module("myApp.popoverFactory",["ionic"]).factory("popoverFactory",["$log","$ionicPopover",t])}(window.angular),function(e){"use strict";function t(){return{init:function(){return new o}}}var o=function(){this.lgn_lbl="Электронная почта",this.lgn_pattern=/\w+/g,this.lgn_err_required="*",this.lgn_err_pattern="Формат: email",this.pwd_lbl="Пароль",this.pwd_pattern=/\w+/g,this.pwd_err_required="*",this.pwd_err_pattern="Формат: от 8 до 50 символов",this.enter_lbl="Вход"};e.module("myApp.accountMetaFactory",[]).factory("accountMetaFactory",[t])}(window.angular),angular.module("myApp.templateFactory",[]).run(["$templateCache",function(e){e.put("cus-cabinet/cus-cabinet.tpl.html",'<ion-view view-title="Заказчик"><ion-content class="padding" has-bouncing="false"><div ng-if="!app_user.is_cus_user"><span class="assertive" ng-bind="not_auth_notif"></span></div><div ng-if="app_user.is_cus_user"><div ng-if="!app_user.is_email_verified"><ng-include src="\'all/tts/email-verif.tpl.html\'"></ng-include></div><div ng-if="app_user.is_email_verified"><div>Личный кабинет заказчика</div><div ui-view="" name="cusInception"></div></div></div></ion-content></ion-view>'),e.put("cus-info/cus-info.tpl.html","<div>История заявок, и т.п. (в разработке)</div>"),e.put("cus-order/cus-order.tpl.html",'<div ng-controller="CusOrderController"><div class="card"><div class="item item-divider">Добавьте заказ на любую работу</div><div class="item item-text-wrap"><form class="list" name="cusOrderForm" ng-submit="addCusOrder(cus_order)"><label class="item item-input"><input type="text" placeholder="Заголовок, например \'Стрижка под ноль\'" ng-model="cus_order.name" ng-required="true"></label> <label class="item item-input"><textarea rows="8" placeholder="Описание заказа, например \'Как у Вин Дизеля\'" ng-model="cus_order.description" ng-required="true">\n          </textarea></label><div class="padding"><button class="button button-block button-positive" ng-disabled="cusOrderForm.$invalid"><span>Опубликовать заказ</span></button></div></form></div></div></div>'),e.put("login/login.tpl.html",'<div ng-controller="LoginController"><form class="list" name="loginForm" ng-submit="enterPass(account, reglog_role, reglog_state)" byt-autofill-fix=""><label class="item item-input"><i class="icon ion-email placeholder-icon"></i> <input type="email" name="email" ng-required="true" ng-model="account.lgn" placeholder="{{account_meta.lgn_lbl}}"></label> <label class="item item-input"><i class="icon ion-key placeholder-icon"></i><input type="password" name="password" ng-required="true" ng-model="account.pwd" placeholder="Пароль"></label><div class="padding"><button class="button button-block button-positive" type="submit" ng-disabled="loginForm.$invalid || reglog_state.is_in_action"><span ng-bind="account_meta.enter_lbl" ng-show="!reglog_state.is_in_action"></span> <span ng-show="reglog_state.is_in_action">...</span></button></div></form></div>'),e.put("pwd-changing/pwd-changing.tpl.html",'<ion-view view-title="Изменение пароля"><ion-content class="padding" has-bouncing="false" overflow-scroll="true"><div class="row responsive-md"><div class="col"></div><div class="col col-50"><div ng-controller="PwdChangingController"><div class="card"><div class="item item-divider">Роль</div><div class="item"><label class="role-radio" data-ng-repeat="utp in pwc_roles"><input type="radio" name="response" ng-model="pwc_role.id" ng-value="utp.id"> <span ng-bind="utp.name"></span></label></div></div><form class="list" name="pwcForm" ng-submit="changePwd(pwc_acc, pwc_role, pwc_state)"><label class="item item-input"><i class="icon ion-email placeholder-icon"></i> <input type="text" name="email" placeholder="Электронный адрес" ng-model="pwc_acc.email" ng-required="true"></label> <label class="item item-input"><i class="icon ion-key placeholder-icon"></i> <input type="password" name="password" placeholder="Новый пароль" ng-model="pwc_acc.pwd" ng-required="true"></label> <label class="item item-input"><i class="icon ion-key placeholder-icon"></i> <input type="password" name="passwordAgain" placeholder="Новый пароль ещё раз" ng-model="pwc_acc.pwd_again" ng-required="true"></label><div class="padding"><button class="button button-block button-positive" type="submit" ng-disabled="pwcForm.$invalid || pwc_state.is_in_action || !pwc_role.id"><span ng-show="pwc_state.is_in_action">...</span> <span ng-show="!pwc_state.is_in_action">Изменить пароль</span></button></div></form><p>Пароль будет изменён только после подтверждения. Инструкция по подтверждению будет выслана на электронный адрес.</p><p><ul style="text-align: left; font-size: 0.8rem"><li>Надёжный пароль должен содержать минимум 8 символов</li><li>Хотя бы одну цифру от 0 до 9</li><li>Хотя бы одну строчную букву [a-z]</li><li>Хотя бы одну заглавную букву [A-Z]</li><li>Разрешены цифры, латинские буквы и спец. символы: !@#$%^&amp;*()_</li><li>Максимальная длина пароля: 50 символов</li></ul></p></div></div><div class="col"></div></div></ion-content></ion-view>'),e.put("quick-order/quick-order.tpl.html",'<div ng-controller="QuickOrderController"><div><div class="card"><div class="item item-divider">Добавьте заказ на любую работу</div><div class="item item-text-wrap"><div><div class="text-center"><button class="button button-positive" ng-click="goToLogin()">Войти, чтобы оставить заказ</button><p>*бесплатно и быстро</p></div></div></div></div></div></div>'),e.put("register/register.tpl.html",'<div ng-controller="RegisterController"><form name="registerForm" autocomplete="off" ng-submit="startRegister(acc_reg, reglog_role, reglog_state)"><div class="list"><label class="item item-input"><i class="icon ion-email placeholder-icon" ng-class="{\'assertive\':registerForm.email.$invalid}"></i> <input type="email" name="email" autocomplete="off" ng-required="true" ng-model="acc_reg.lgn" placeholder="Электронный адрес"></label> <label class="item item-input"><i class="icon ion-key placeholder-icon" ng-class="{\'assertive\':registerForm.password.$invalid}"></i> <input type="password" name="password" placeholder="Пароль" autocomplete="off" ng-required="true" ng-model="acc_reg.pwd" ng-pattern="pwd_pattern"></label> <label class="item item-input"><i class="icon ion-key placeholder-icon" ng-class="{\'assertive\':registerForm.password_again.$invalid}"></i> <input type="password" name="password_again" placeholder="Повтор пароля" autocomplete="off" ng-required="true" ng-model="acc_reg.pwd_again" ng-pattern="pwd_pattern"></label><div class="item item-checkbox"><label class="checkbox"><input type="checkbox" ng-model="acc_reg.is_agree" ng-required="true"></label> Agree with that</div><div class="padding"><button class="button button-block button-positive" type="submit" ng-disabled="registerForm.$invalid || reglog_state.is_in_action"><span ng-show="!reglog_state.is_in_action">Зарегистрироваться</span> <span ng-show="reglog_state.is_in_action">...</span></button></div><div class="padding"><ul style="text-align: left; font-size: 0.8rem"><li>Надёжный пароль должен содержать минимум 8 символов</li><li>Хотя бы одну цифру от 0 до 9</li><li>Хотя бы одну строчную букву [a-z]</li><li>Хотя бы одну заглавную букву [A-Z]</li><li>Разрешены цифры, латинские буквы и спец. символы: !@#$%^&*()_</li><li>Максимальная длина пароля: 50 символов</li></ul></div></div></form></div>'),e.put("reglog/reglog.tpl.html",'<div ng-controller="RegLogController"><div class="text-center"><div class="card"><div class="item item-divider">Роль</div><div class="item"><label class="role-radio" data-ng-repeat="utp in utypes"><input type="radio" name="response" ng-model="reglog_role.id" ng-value="utp.id"> <span ng-bind="utp.name"></span></label></div></div><div class="card"><div class="item item-divider"><span ng-show="!is_login_view">Регистрация</span> <span ng-show="is_login_view">Вход</span></div><div class="item"><button class="button" ng-click="enterSocial(reglog_role)">Google</button> <button class="button" onclick="alert(\'В разработке\')">Вконтакте</button></div><h5>Или</h5><div class="item" ng-show="is_login_view"><div ng-include="" src="\'login/login.tpl.html\'"></div><div><button class="button button-small" ng-click="toggleRegLogView()">Регистрация</button> <button class="button button-small" ng-click="goToPwdChanging()">Забыли пароль?</button></div></div><div class="item" ng-show="!is_login_view"><ng-include src="\'register/register.tpl.html\'"></ng-include><button class="button button-small" ng-click="toggleRegLogView()">Вернуться ко входу</button></div></div></div></div>'),e.put("sup-cabinet/sup-cabinet.tpl.html",'<ion-view view-title="Исполнитель"><ion-content class="padding" has-bouncing="false"><div ng-if="!app_user.is_sup_user"><span class="assertive" ng-bind="not_auth_notif"></span></div><div ng-if="app_user.is_sup_user"><div ng-if="!app_user.is_email_verified"><ng-include src="\'all/tts/email-verif.tpl.html\'"></ng-include></div><div ng-if="app_user.is_email_verified"><div>Кабинет исполнителя</div><div ui-view="" name="supInception"></div></div></div></ion-content></ion-view>'),e.put("sup-info/sup-info.tpl.html","<div>История заказов и т.п. (в разработке)</div>"),e.put("welcome/welcome.tpl.html",'<ion-view view-title="Биржа услуг"><ion-content class="padding" has-bouncing="false"><div class="row"><div class="col"><div class="card" ng-show="!app_user.is_authed"><div class="item item-divider">Биржа услуг: найдём вам подходящего исполнителя</div><div class="item item-text-wrap"><ul class="list"><li class="item item-checkbox"><label class="checkbox"><input type="checkbox" checked=""></label> Вы оставляете заявку на работу</li><li class="item item-checkbox"><label class="checkbox"><input type="checkbox" checked=""></label> Исполнители присылают вам свои предложения</li><li class="item item-checkbox"><label class="checkbox"><input type="checkbox" checked=""></label> Вы выбираете исполнителя</li></ul></div></div><div ng-if="!app_user.is_authed"><ng-include src="\'quick-order/quick-order.tpl.html\'"></ng-include></div><div ng-if="app_user.is_cus_user"><ng-include src="\'cus-order/cus-order.tpl.html\'"></ng-include></div></div><div class="col"><div class="card"><div class="item item-divider">Текущие заказы (три крайних)</div><div class="item item-text-wrap"><ul class="list"><li class="item item-avatar" ng-repeat="order in orders"><img src="person.gif"><p style="float: right">{{order.created | date: \'d MMM h:mm\'}}</p><h2>{{order.from}}</h2><p>{{order.body}}</p></li></ul></div></div></div></div></ion-content></ion-view>'),e.put("wsp/wsp.tpl.html",'<ion-side-menus enable-menu-with-back-views="true"><ion-side-menu-content><ion-nav-bar class="bar-royal"><ion-nav-back-button></ion-nav-back-button><ion-nav-buttons side="left"><button class="button button-icon button-clear ion-navicon" menu-toggle="left"></button></ion-nav-buttons><ion-nav-buttons side="right"><button class="button button-clear" ng-click="goToLogin()" ng-show="!app_user.is_authed"><i class="icon ion-log-in"></i></button> <button class="button button-clear" ng-click="popover.show($event)" ng-show="app_user.is_authed"><i class="icon ion-person"></i></button></ion-nav-buttons></ion-nav-bar><ion-nav-view name="mainContent"></ion-nav-view></ion-side-menu-content><ion-side-menu side="left" expose-aside-when="large"><ion-header-bar class="bar-dark" align-title="center"><h1 class="title"><span ng-show="app_user.is_authed"><span ng-bind="app_user.name"></span></span> <span ng-show="!app_user.is_authed">Меню</span></h1></ion-header-bar><ion-content has-bouncing="false"><ul class="list"><a class="item item-icon-right" ui-sref="byt.welcome" menu-close=""><i class="icon ion-home"></i> Главная</a> <a class="item item-icon-right" ng-click="goToLogin()" ng-if="!app_user.is_authed" menu-close=""><i class="icon ion-log-in"></i> Вход</a> <a class="item item-icon-right" ng-click="goToLogin(\'reg\')" ng-if="!app_user.is_authed" menu-close=""><i class="icon ion-person-add"></i> Регистрация</a> <a class="item item-icon-right" ng-click="goToCab()" ng-if="app_user.is_authed" menu-close=""><i class="icon ion-briefcase"></i> Кабинет</a></ul></ion-content><ion-footer-bar class="bar-dark" align-title="left"><div class="buttons"><button class="button button-clear" ng-click="logoff()" ng-show="app_user.is_authed"><i class="icon ion-log-out"></i> Выход</button> <button class="button button-clear" ng-click="goToLogin()" ng-show="!app_user.is_authed"><i class="icon ion-log-out"></i> Вход</button></div></ion-footer-bar></ion-side-menu></ion-side-menus>'),e.put("all/tts/account-popover.tpl.html",'<ion-popover-view><ion-content><div class="list"><a class="item" ng-click="goToCabAndClosePopover()"><i class="icon ion-briefcase"></i> <span ng-bind="app_user.name"></span></a> <a class="item" ng-click="logoffAndClosePopover()"><i class="icon ion-log-out"></i> <span>Выход</span></a></div></ion-content></ion-popover-view>'),e.put("all/tts/email-verif.tpl.html",'<div class="card"><div class="item item-divider">Подтверждение электронного адреса</div><div class="item item-text-wrap"><div class="text-center"><p>На ваш электронный адрес выслана инструкция для подтверждения аккаунта.</p><button class="button button-positive" ng-click="checkVerification()">Инструкция выполнена: проверить подтверждение</button><p>Внимание: неподтверждённые аккаунты удаляются через 12 часов после создания</p></div></div></div>'),e.put("all/tts/reglog-modal.tpl.html",'<ion-modal-view><ion-header-bar class="bar-positive"><h1 class="title">Вход / Регистрация</h1><button class="button button-clear" ng-click="closeModalLgn()">X</button></ion-header-bar><ion-content><div class="row responsive-md"><div class="col"></div><div class="col col-50"><ng-include src="\'reglog/reglog.tpl.html\'"></ng-include></div><div class="col"></div></div></ion-content></ion-modal-view>'),e.put("all/tts/reglog-tab.tpl.html",'<ion-view view-title="Вход / Регистрация"><ion-content class="padding" has-bouncing="false" overflow-scroll="true"><div class="row responsive-md"><div class="col"></div><div class="col col-50"><ng-include src="\'reglog/reglog.tpl.html\'"></ng-include></div><div class="col"></div></div></ion-content></ion-view>')
}]);
//# sourceMappingURL=data:application/json;base64,